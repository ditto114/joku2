diff --git a/public/admin.html b/public/admin.html
index 21e3aa4c67bd19321ea60abff39949d8957713b4..f32ea968b78b58b1e0d5d73ad7842b5b553d986a 100644
--- a/public/admin.html
+++ b/public/admin.html
@@ -1,416 +1,530 @@
 <!doctype html>
 <html lang="ko">
 
 <head>
     <meta charset="utf-8" />
     <meta name="viewport" content="width=device-width,initial-scale=1" />
     <title>조쿠공대 관리페이지</title>
     <style>
         * {
             box-sizing: border-box;
             margin: 0;
             padding: 0;
         }
 
         body {
             font-family: 'Pretendard', system-ui, -apple-system, Segoe UI, Roboto, Noto Sans KR, Arial, sans-serif;
             background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
             min-height: 100vh;
-            padding: 20px;
+            padding: 120px 24px 40px;
+            color: #1f2937;
+            line-height: 1.5;
         }
 
         header {
-            background: rgba(255, 255, 255, 0.95);
-            backdrop-filter: blur(10px);
-            padding: 24px 32px;
-            border-radius: 20px;
-            margin-bottom: 24px;
-            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
+            position: fixed;
+            top: 0;
+            left: 0;
+            right: 0;
+            z-index: 100;
+            padding: 12px 24px 20px;
+        }
+
+        .header-row {
+            background: rgba(255, 255, 255, 0.96);
+            backdrop-filter: blur(12px);
+            padding: 16px 24px;
+            border-radius: 18px;
+            margin: 0 auto;
+            max-width: 1200px;
+            box-shadow: 0 12px 30px rgba(17, 24, 39, 0.15);
+            display: flex;
+            align-items: center;
+            justify-content: space-between;
+            gap: 16px;
+            flex-wrap: wrap;
         }
 
         h1 {
-            font-size: 28px;
+            font-size: 26px;
             font-weight: 700;
             background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
             -webkit-background-clip: text;
             -webkit-text-fill-color: transparent;
             background-clip: text;
         }
 
+        .header-actions {
+            display: flex;
+            align-items: center;
+            gap: 8px;
+            flex-wrap: wrap;
+        }
+
         /* 로그인 게이트 */
         #gate {
             max-width: 480px;
-            margin: 80px auto;
+            margin: 140px auto 0;
             background: rgba(255, 255, 255, 0.95);
             backdrop-filter: blur(10px);
-            padding: 40px;
+            padding: 32px;
             border-radius: 24px;
-            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
+            box-shadow: 0 18px 50px rgba(0, 0, 0, 0.25);
         }
 
         #gate h2 {
-            font-size: 24px;
-            margin-bottom: 24px;
+            font-size: 22px;
+            margin-bottom: 20px;
             text-align: center;
         }
 
         #gate .row {
             display: flex;
             gap: 12px;
             margin-bottom: 12px;
         }
 
         #gate input {
             flex: 1;
-            padding: 14px 18px;
+            padding: 12px 16px;
             border: 2px solid #e5e7eb;
             border-radius: 12px;
             font-size: 15px;
             transition: all 0.3s;
         }
 
         #gate input:focus {
             outline: none;
             border-color: #667eea;
             box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
         }
 
         #gateMsg {
             text-align: center;
             color: #6b7280;
             font-size: 14px;
             margin-top: 8px;
         }
 
-        /* 메인 그리드 */
+        /* 메인 컨텐츠 */
         main {
-            display: grid;
-            grid-template-columns: 1.5fr 1fr;
+            display: flex;
+            flex-direction: column;
             gap: 20px;
-            max-width: 1400px;
+            max-width: 1200px;
             margin: 0 auto;
         }
 
-        @media (max-width: 1024px) {
-            main {
-                grid-template-columns: 1fr;
-            }
-        }
-
         .card {
             background: rgba(255, 255, 255, 0.95);
             backdrop-filter: blur(10px);
-            border-radius: 20px;
-            padding: 28px;
-            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
+            border-radius: 18px;
+            padding: 24px;
+            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.12);
             transition: transform 0.3s, box-shadow 0.3s;
         }
 
         .card:hover {
             transform: translateY(-2px);
             box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
         }
 
         .card h2 {
-            font-size: 20px;
-            margin-bottom: 20px;
+            font-size: 18px;
+            margin-bottom: 16px;
             display: flex;
             align-items: center;
             gap: 10px;
             font-weight: 600;
         }
 
+        .card-header {
+            display: flex;
+            align-items: center;
+            justify-content: space-between;
+            gap: 12px;
+            margin-bottom: 16px;
+        }
+
+        .card-header h2 {
+            margin-bottom: 0;
+        }
+
         /* 예약 현황 */
+        .reservation-card {
+            padding: 28px;
+        }
+
+        .reservation-grid {
+            display: flex;
+            flex-direction: column;
+            gap: 18px;
+        }
+
+        .turn-row {
+            display: grid;
+            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
+            gap: 18px;
+        }
+
         .turn-section {
             background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
-            border-left: 4px solid #3b82f6;
-            padding: 20px;
+            border: 1px solid rgba(59, 130, 246, 0.25);
+            padding: 18px 20px;
             border-radius: 16px;
-            margin-bottom: 16px;
+            display: flex;
+            flex-direction: column;
+            gap: 14px;
         }
 
         .turn-section.turn2 {
             background: linear-gradient(135deg, #faf5ff 0%, #f3e8ff 100%);
-            border-left-color: #a855f7;
+            border-color: rgba(168, 85, 247, 0.25);
         }
 
         .turn-header {
             display: flex;
             align-items: center;
             justify-content: space-between;
-            margin-bottom: 16px;
+            gap: 12px;
         }
 
         .turn-title {
             display: flex;
             align-items: center;
             gap: 12px;
             font-weight: 600;
-            font-size: 18px;
+            font-size: 17px;
         }
 
         .turn-time {
             font-family: 'Courier New', monospace;
-            font-size: 20px;
+            font-size: 18px;
             font-weight: 700;
-            color: #3b82f6;
+            color: #1d4ed8;
             background: white;
-            padding: 8px 16px;
-            border-radius: 12px;
-            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
+            padding: 6px 14px;
+            border-radius: 10px;
+            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
         }
 
         .turn2 .turn-time {
-            color: #a855f7;
+            color: #7c3aed;
         }
 
         .gear {
-            width: 36px;
-            height: 36px;
+            width: 34px;
+            height: 34px;
             display: inline-flex;
             align-items: center;
             justify-content: center;
             border: none;
             border-radius: 10px;
             background: white;
             cursor: pointer;
             transition: all 0.2s;
-            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
+            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
         }
 
         .gear:hover {
-            transform: rotate(45deg) scale(1.1);
+            transform: rotate(30deg) scale(1.05);
             box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
         }
 
         .gear svg {
-            width: 20px;
-            height: 20px;
+            width: 18px;
+            height: 18px;
             color: #6b7280;
         }
 
         .slot-list {
             display: grid;
+            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
             gap: 10px;
         }
 
         .slot {
             display: flex;
-            align-items: center;
-            gap: 12px;
-            background: white;
-            padding: 12px 16px;
+            flex-direction: column;
+            gap: 4px;
+            background: rgba(255, 255, 255, 0.9);
+            padding: 10px 12px;
             border-radius: 12px;
-            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
+            border: 1px solid rgba(148, 163, 184, 0.2);
+            min-height: 72px;
         }
 
         .slot-label {
             font-weight: 600;
-            color: #374151;
-            min-width: 50px;
+            color: #475569;
+            font-size: 12px;
+            letter-spacing: 0.04em;
+            text-transform: uppercase;
         }
 
         .slot-value {
-            flex: 1;
             color: #111827;
+            font-size: 15px;
+            font-weight: 600;
         }
 
         .slot-value.empty {
-            color: #9ca3af;
+            color: #94a3b8;
             font-style: italic;
+            font-weight: 500;
+        }
+
+        .extra-grid {
+            display: grid;
+            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
+            gap: 14px;
         }
 
-        /* 추가 섹션 */
-        .extra-section {
+        .extra-card {
             background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
-            border-left: 4px solid #f59e0b;
-            padding: 16px;
             border-radius: 16px;
-            margin-top: 16px;
+            padding: 14px 16px;
+            border: 1px solid rgba(245, 158, 11, 0.25);
+            display: flex;
+            flex-direction: column;
+            gap: 6px;
+        }
+
+        .extra-card.skill2 {
+            background: linear-gradient(135deg, #ede9fe 0%, #ddd6fe 100%);
+            border-color: rgba(124, 58, 237, 0.25);
+        }
+
+        .extra-card.enre {
+            background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%);
+            border-color: rgba(34, 197, 94, 0.25);
         }
 
         .extra-title {
             font-weight: 600;
-            font-size: 16px;
-            margin-bottom: 8px;
+            font-size: 14px;
             display: flex;
             align-items: center;
             gap: 8px;
+            color: #92400e;
+        }
+
+        .extra-card.skill2 .extra-title {
+            color: #5b21b6;
+        }
+
+        .extra-card.enre .extra-title {
+            color: #166534;
         }
 
         .extra-content {
             color: #78350f;
-            padding: 8px;
-            background: rgba(255, 255, 255, 0.6);
-            border-radius: 8px;
+            padding: 10px 12px;
+            background: rgba(255, 255, 255, 0.75);
+            border-radius: 10px;
+            font-weight: 600;
         }
 
-        /* 우측 컨트롤 패널 */
-        .control-panel {
-            display: grid;
-            gap: 20px;
+        .extra-card.skill2 .extra-content {
+            color: #4c1d95;
+        }
+
+        .extra-card.enre .extra-content {
+            color: #166534;
+        }
+
+        .extra-content.empty {
+            color: #94a3b8;
+            font-style: italic;
+            font-weight: 500;
+        }
+
+        .extra-card.skill2 .extra-content.empty,
+        .extra-card.enre .extra-content.empty {
+            color: #94a3b8;
         }
 
         /* 입력 폼 */
         .form-group {
             margin-bottom: 16px;
         }
 
         .form-group label {
             display: block;
             font-size: 13px;
             font-weight: 600;
             color: #374151;
             margin-bottom: 8px;
         }
 
         .input-wrapper {
             position: relative;
         }
 
         .input-wrapper input {
             width: 100%;
             padding: 12px 16px;
             padding-right: 60px;
             border: 2px solid #e5e7eb;
             border-radius: 12px;
             font-size: 15px;
             transition: all 0.3s;
         }
 
         .input-wrapper input:focus {
             outline: none;
             border-color: #667eea;
             box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
         }
 
         .input-suffix {
             position: absolute;
             right: 16px;
             top: 50%;
             transform: translateY(-50%);
             color: #9ca3af;
             font-size: 13px;
             font-weight: 600;
         }
 
         /* 버튼 */
         button {
-            padding: 12px 24px;
+            padding: 10px 18px;
             border: none;
-            border-radius: 12px;
-            font-size: 15px;
+            border-radius: 10px;
+            font-size: 14px;
             font-weight: 600;
             cursor: pointer;
             transition: all 0.3s;
             display: inline-flex;
             align-items: center;
             justify-content: center;
             gap: 8px;
         }
 
         .btn-primary {
             background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
             color: white;
             box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
         }
 
         .btn-primary:hover {
             transform: translateY(-2px);
             box-shadow: 0 6px 20px rgba(102, 126, 234, 0.5);
         }
 
         .btn-primary:active {
             transform: translateY(0);
         }
 
         .btn-danger {
             background: linear-gradient(135deg, #f87171 0%, #ef4444 100%);
             color: white;
             box-shadow: 0 4px 12px rgba(239, 68, 68, 0.4);
         }
 
         .btn-danger:hover {
             transform: translateY(-2px);
             box-shadow: 0 6px 20px rgba(239, 68, 68, 0.5);
         }
 
         .btn-secondary {
             background: #f3f4f6;
             color: #374151;
         }
 
         .btn-secondary:hover {
             background: #e5e7eb;
         }
 
+        .btn-ghost {
+            background: rgba(255, 255, 255, 0.4);
+            color: #374151;
+        }
+
+        .btn-ghost:hover {
+            background: rgba(255, 255, 255, 0.6);
+        }
+
         .btn-group {
             display: flex;
             gap: 12px;
             flex-wrap: wrap;
         }
 
         .btn-full {
             width: 100%;
         }
 
         /* 초기화 섹션 */
         .reset-select {
             width: 100%;
             height: 200px;
             padding: 12px;
             border: 2px solid #e5e7eb;
             border-radius: 12px;
             font-size: 14px;
             margin-bottom: 16px;
         }
 
         .reset-select option {
             padding: 8px;
             border-radius: 6px;
             margin: 2px 0;
         }
 
         .reset-select option:checked {
             background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
             color: white;
         }
 
         /* 공대원 섹션 */
-        .members-section {
-            grid-column: 1 / -1;
+        .member-list {
+            display: grid;
+            gap: 8px;
+            max-height: 360px;
+            overflow-y: auto;
+            padding-right: 4px;
+        }
+
+        .member-list::-webkit-scrollbar {
+            width: 6px;
+        }
+
+        .member-list::-webkit-scrollbar-thumb {
+            background: rgba(148, 163, 184, 0.7);
+            border-radius: 999px;
         }
 
         .member-item {
             display: flex;
             align-items: center;
             justify-content: space-between;
-            padding: 14px 18px;
+            padding: 12px 16px;
             background: linear-gradient(135deg, #f9fafb 0%, #f3f4f6 100%);
             border-radius: 12px;
-            margin-bottom: 8px;
             transition: all 0.2s;
         }
 
         .member-item:hover {
             background: linear-gradient(135deg, #e5e7eb 0%, #d1d5db 100%);
             transform: translateX(4px);
         }
 
         .member-info {
             display: flex;
             align-items: center;
             gap: 12px;
         }
 
         .member-name {
             font-weight: 600;
             color: #111827;
         }
 
         .member-job {
             color: #6b7280;
             font-size: 14px;
             padding: 4px 12px;
             background: white;
             border-radius: 8px;
@@ -422,225 +536,250 @@
             color: #6b7280;
             margin-top: 12px;
             padding: 10px 14px;
             border-radius: 10px;
             background: #f9fafb;
             display: flex;
             align-items: center;
             gap: 8px;
         }
 
         .status-msg.success {
             background: #dcfce7;
             color: #166534;
         }
 
         .status-msg.error {
             background: #fee2e2;
             color: #991b1b;
         }
 
         /* 모달 */
         dialog {
             border: none;
             border-radius: 20px;
             padding: 0;
-            max-width: 90vw;
-            width: 420px;
+            max-width: 92vw;
+            width: 460px;
             box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
         }
 
+        dialog.modal-wide {
+            width: 520px;
+        }
+
+        dialog.modal-large {
+            width: 640px;
+        }
+
         dialog::backdrop {
             background: rgba(0, 0, 0, 0.6);
             backdrop-filter: blur(4px);
         }
 
         .modal {
-            padding: 32px;
+            padding: 28px;
+            display: flex;
+            flex-direction: column;
+            gap: 20px;
+            max-height: 80vh;
+            overflow-y: auto;
         }
 
         .modal h3 {
             font-size: 20px;
-            margin-bottom: 24px;
             font-weight: 600;
         }
 
+        .modal-body {
+            display: grid;
+            gap: 16px;
+        }
+
         .modal-grid {
             display: grid;
             grid-template-columns: 1fr 1fr;
             gap: 16px;
-            margin-bottom: 24px;
         }
 
         .modal-actions {
             display: flex;
             gap: 12px;
             justify-content: flex-end;
         }
 
+        .modal-subactions {
+            justify-content: flex-start;
+        }
+
         .hidden {
             display: none !important;
         }
 
         /* 로딩 애니메이션 */
         @keyframes spin {
             to {
                 transform: rotate(360deg);
             }
         }
 
         .loading {
             display: inline-block;
             width: 16px;
             height: 16px;
             border: 2px solid #e5e7eb;
             border-top-color: #667eea;
             border-radius: 50%;
             animation: spin 0.6s linear infinite;
         }
 
-        /* 헤더 행 배치 */
-        .header-row {
-            display: flex;
-            align-items: center;
-            justify-content: space-between;
-            gap: 12px;
-        }
-
-        .btn-group {
-            display: flex;
-            gap: 8px;
-            align-items: center;
-        }
     </style>
 </head>
 
 <body>
     <header>
         <div class="header-row">
             <h1>🎮 조쿠공대 관리페이지</h1>
-            <div class="btn-group">
-                <button id="sendScreenshot" class="btn-secondary">🖼️ 화면 전송</button>
+            <div class="header-actions">
+                <button class="btn-secondary" data-open-modal="pricesDialog">💰 시세 변경</button>
+                <button class="btn-secondary" data-open-modal="resetDialog">🗑️ 초기화</button>
+                <button class="btn-secondary" data-open-modal="membersDialog">🛡️ 공대원 관리</button>
+                <button id="sendScreenshot" class="btn-ghost">🖼️ 화면 전송</button>
             </div>
         </div>
     </header>
 
     <!-- 로그인 게이트 -->
     <section id="gate" class="hidden">
         <h2>🔐 관리자 로그인</h2>
         <div class="row">
             <input id="pwd" type="password" placeholder="관리자 비밀번호를 입력하세요" />
             <button id="loginBtn" class="btn-primary">접속</button>
         </div>
         <div id="gateMsg"></div>
     </section>
 
     <!-- 메인 컨텐츠 -->
     <main id="app" class="hidden">
-        <!-- 좌측: 예약 현황 -->
-        <div>
-            <div class="card" id="reservationStatusCard">
+        <section class="card reservation-card" id="reservationStatusCard">
+            <div class="card-header">
                 <h2>🧑‍🤝‍🧑 현재 예약 현황</h2>
-                <div id="statusBox">
-                    <div class="status-msg">불러오는 중...</div>
-                </div>
             </div>
-        </div>
+            <div id="statusBox" class="reservation-grid">
+                <div class="status-msg">불러오는 중...</div>
+            </div>
+        </section>
+    </main>
 
-        <!-- 우측: 컨트롤 패널 -->
-        <div class="control-panel">
-            <!-- 시세 변경 -->
-            <div class="card">
-                <h2>💰 시세 변경</h2>
+    <!-- 시세 변경 모달 -->
+    <dialog id="pricesDialog">
+        <div class="modal">
+            <h3>💰 시세 변경</h3>
+            <div class="modal-body">
                 <div class="form-group">
                     <label>확투 (1순, 2순)</label>
                     <div class="input-wrapper">
                         <input id="p1" type="number" placeholder="1000" />
                         <span class="input-suffix">골드</span>
                     </div>
                 </div>
                 <div class="form-group">
                     <label>3순</label>
                     <div class="input-wrapper">
                         <input id="p2" type="number" placeholder="800" />
                         <span class="input-suffix">골드</span>
                     </div>
                 </div>
                 <div class="form-group">
                     <label>스킬북1</label>
                     <div class="input-wrapper">
                         <input id="p3" type="number" placeholder="1000" />
                         <span class="input-suffix">골드</span>
                     </div>
                 </div>
                 <div class="form-group">
                     <label>스킬북2</label>
                     <div class="input-wrapper">
                         <input id="p4" type="number" placeholder="300" />
                         <span class="input-suffix">골드</span>
                     </div>
                 </div>
-                <button id="savePrices" class="btn-primary btn-full">💾 시세 저장</button>
-                <div id="priceMsg" class="status-msg hidden"></div>
             </div>
+            <div id="priceMsg" class="status-msg hidden"></div>
+            <div class="modal-actions">
+                <button class="btn-secondary" data-close-modal>닫기</button>
+                <button id="savePrices" class="btn-primary">💾 시세 저장</button>
+            </div>
+        </div>
+    </dialog>
 
-            <!-- 초기화 -->
-            <div class="card">
-                <h2>🗑️ 초기화</h2>
+    <!-- 초기화 모달 -->
+    <dialog id="resetDialog" class="modal-wide">
+        <div class="modal">
+            <h3>🗑️ 예약 초기화</h3>
+            <div class="modal-body">
                 <select id="resetSel" class="reset-select" multiple>
                     <option value="turn1_first">1트 1순</option>
                     <option value="turn1_second">1트 2순</option>
                     <option value="turn1_third">1트 3순</option>
                     <option value="turn2_first">2트 1순</option>
                     <option value="turn2_second">2트 2순</option>
                     <option value="turn2_third">2트 3순</option>
                     <option value="skillbook1">스킬북1</option>
                     <option value="skillbook2">스킬북2</option>
                     <option value="enre_eat">엔레먹자</option>
                 </select>
                 <div class="btn-group">
-                    <button id="resetSome" class="btn-primary" style="flex:1;">선택 초기화</button>
-                    <button id="resetAll" class="btn-danger" style="flex:1;">모두 초기화</button>
+                    <button id="resetSome" class="btn-primary" style="flex: 1;">선택 초기화</button>
+                    <button id="resetAll" class="btn-danger" style="flex: 1;">모두 초기화</button>
                 </div>
-                <div id="resetMsg" class="status-msg hidden"></div>
+            </div>
+            <div id="resetMsg" class="status-msg hidden"></div>
+            <div class="modal-actions">
+                <button class="btn-secondary" data-close-modal>닫기</button>
             </div>
         </div>
+    </dialog>
 
-        <!-- 하단: 공대원 명단 -->
-        <div class="card members-section">
-            <h2>🛡️ 공대원 명단</h2>
-            <div class="btn-group" style="margin-bottom: 20px;">
+    <!-- 공대원 관리 모달 -->
+    <dialog id="membersDialog" class="modal-large">
+        <div class="modal">
+            <h3>🛡️ 공대원 명단 관리</h3>
+            <div class="modal-subactions btn-group">
                 <button id="mAdd" class="btn-primary">➕ 공대원 추가</button>
                 <button id="mDel" class="btn-danger">➖ 공대원 제거</button>
                 <button id="mReload" class="btn-secondary">🔄 새로고침</button>
             </div>
-            <div id="mBox">
+            <div id="mBox" class="member-list">
                 <div class="status-msg">불러오는 중...</div>
             </div>
             <div id="mMsg" class="status-msg hidden"></div>
+            <div class="modal-actions">
+                <button class="btn-secondary" data-close-modal>닫기</button>
+            </div>
         </div>
-    </main>
+    </dialog>
 
     <!-- 출발시간 변경 모달 -->
     <dialog id="timeDialog">
         <div class="modal">
             <h3 id="timeTitle">⏰ 출발시간 변경</h3>
             <div class="modal-grid">
                 <div class="form-group">
                     <label>시 (0-23)</label>
                     <input id="th" type="number" min="0" max="23" />
                 </div>
                 <div class="form-group">
                     <label>분 (0-59)</label>
                     <input id="tm" type="number" min="0" max="59" />
                 </div>
             </div>
             <div class="modal-actions">
                 <button id="timeCancel" class="btn-secondary">취소</button>
                 <button id="timeSave" class="btn-primary">저장</button>
             </div>
         </div>
     </dialog>
 
     <!-- Socket.IO -->
     <script src="/socket.io/socket.io.js"></script>
     <script>
@@ -718,151 +857,182 @@
                     const targetEl = findReservationCard();
                     if (!targetEl) throw new Error('캡쳐 대상(현재 예약 현황 카드)을 찾지 못했습니다. id="reservationStatusCard"를 추가해 주세요.');
 
                     const dataUrl = await captureCardViaScreenShare(targetEl);
 
                     btn.textContent = '업로드중...';
                     const r = await fetch('/api/screenshot', {
                         method: 'POST',
                         headers: { 'Content-Type': 'application/json', ...authHeaders() },
                         body: JSON.stringify({ image: dataUrl })
                     });
                     const j = await r.json().catch(() => ({}));
                     if (!r.ok || !j?.ok) throw new Error(j?.error || '업로드 실패');
 
                     btn.textContent = '✅ 전송 완료';
                     setTimeout(() => { btn.textContent = prev; btn.disabled = false; }, 1200);
                 } catch (e) {
                     alert('화면 전송 실패: ' + (e?.message || e));
                     btn.disabled = false;
                     btn.textContent = '🖼️ 화면 전송';
                 }
             });
         })();
 
 
+        // ── 헤더 모달 제어 ──
+        function openDialogById(id) {
+            if (!id) return;
+            const dialog = $(id);
+            if (!dialog) return;
+            if (typeof dialog.showModal === 'function') {
+                dialog.showModal();
+            } else {
+                dialog.setAttribute('open', '');
+            }
+        }
+
+        function closeDialog(dialog) {
+            if (!dialog) return;
+            if (typeof dialog.close === 'function') {
+                dialog.close();
+            } else {
+                dialog.removeAttribute('open');
+            }
+        }
+
+        document.querySelectorAll('[data-open-modal]').forEach(btn => {
+            const target = btn.getAttribute('data-open-modal');
+            btn.addEventListener('click', () => {
+                if (!getPwd()) {
+                    showGate('❌ 인증 필요: 먼저 로그인하세요.');
+                    return;
+                }
+                openDialogById(target);
+            });
+        });
+
+        document.querySelectorAll('[data-close-modal]').forEach(btn => {
+            btn.addEventListener('click', () => closeDialog(btn.closest('dialog')));
+        });
+
+
         async function jsonOrThrow(r) {
             if (!r.ok) {
                 if (r.status === 401) { clearPwd(); showGate('❌ 인증 실패. 비밀번호를 다시 입력하세요.'); }
                 const t = await r.text().catch(() => '');
                 throw new Error(`HTTP ${r.status} ${r.statusText} | ${t.slice(0, 200)}`);
             }
             return r.json();
         }
 
         function showApp() { gate.classList.add('hidden'); app.classList.remove('hidden'); }
         function showGate(msg = '') { app.classList.add('hidden'); gate.classList.remove('hidden'); gateMsg.textContent = msg; }
 
         function showMsg(el, msg, type = '') {
             el.textContent = msg;
             el.classList.remove('hidden', 'success', 'error');
             if (type) el.classList.add(type);
         }
 
         const statusBox = $('statusBox');
         const mBox = $('mBox');
 
         function fmtTime(t) {
             if (!t) return '--:--';
             const h = String(t.hour ?? '').padStart(2, '0');
             const m = String(t.minute ?? '').padStart(2, '0');
             return `${h}:${m}`;
         }
 
         function gearBtn(id) {
             return `<button class="gear" data-gear="${id}" title="출발시간 수정">
                 <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                     <circle cx="12" cy="12" r="3"/>
                     <path d="M12 1v6m0 6v6M1 12h6m6 0h6"/>
                     <path d="m4.93 4.93 4.24 4.24m5.66 5.66 4.24 4.24M4.93 19.07l4.24-4.24m5.66-5.66 4.24-4.24"/>
                 </svg>
             </button>`;
         }
 
         function renderSlot(label, value) {
             const isEmpty = !value || !String(value).trim();
             return `<div class="slot">
                 <span class="slot-label">${label}</span>
                 <span class="slot-value ${isEmpty ? 'empty' : ''}">${isEmpty ? '구인중' : value}</span>
             </div>`;
         }
 
+        function renderTurnSection(label, gearKey, time, data = {}, extraClass = '') {
+            const slots = data || {};
+            return `<section class="turn-section ${extraClass}">
+                <div class="turn-header">
+                    <div class="turn-title">
+                        <span>${label}</span>
+                        <span class="turn-time">${fmtTime(time)}</span>
+                    </div>
+                    ${gearBtn(gearKey)}
+                </div>
+                <div class="slot-list">
+                    ${renderSlot('1순', slots.first)}
+                    ${renderSlot('2순', slots.second)}
+                    ${renderSlot('3순', slots.third)}
+                </div>
+            </section>`;
+        }
+
+        function renderExtraCard(title, rawValue, extraClass = '') {
+            const str = rawValue == null ? '' : String(rawValue).trim();
+            const isEmpty = !str;
+            const display = isEmpty ? '구인중' : str;
+            return `<div class="extra-card ${extraClass}">
+                <div class="extra-title">${title}</div>
+                <div class="extra-content ${isEmpty ? 'empty' : ''}">${display}</div>
+            </div>`;
+        }
+
         function renderStatus(j) {
             const t1 = j?.departureTimes?.turn1;
             const t2 = j?.departureTimes?.turn2;
-
-            const turn1Html = `
-                <div class="turn-section">
-                    <div class="turn-header">
-                        <div class="turn-title">
-                            <span>🔸 1트</span>
-                            <span class="turn-time">${fmtTime(t1)}</span>
-                        </div>
-                        ${gearBtn('t1')}
-                    </div>
-                    <div class="slot-list">
-                        ${renderSlot('1순', j?.turn1?.first)}
-                        ${renderSlot('2순', j?.turn1?.second)}
-                        ${renderSlot('3순', j?.turn1?.third)}
-                    </div>
-                </div>`;
-
-            const turn2Html = `
-                <div class="turn-section turn2">
-                    <div class="turn-header">
-                        <div class="turn-title">
-                            <span>🔹 2트</span>
-                            <span class="turn-time">${fmtTime(t2)}</span>
-                        </div>
-                        ${gearBtn('t2')}
-                    </div>
-                    <div class="slot-list">
-                        ${renderSlot('1순', j?.turn2?.first)}
-                        ${renderSlot('2순', j?.turn2?.second)}
-                        ${renderSlot('3순', j?.turn2?.third)}
-                    </div>
+            const turnRowHtml = `
+                <div class="turn-row">
+                    ${renderTurnSection('🔸 1트', 't1', t1, j?.turn1)}
+                    ${renderTurnSection('🔹 2트', 't2', t2, j?.turn2, 'turn2')}
                 </div>`;
 
             const sb1 = j?.skillbook1 ?? {};
             const sb2 = j?.skillbook2 ?? {};
             const enre = Array.isArray(j?.enreEat) ? j.enreEat : [];
 
             const extraHtml = `
-                <div class="extra-section">
-                    <div class="extra-title">📚 스킬북1</div>
-                    <div class="extra-content">${sb1.reservation || '구인중'}</div>
-                </div>
-                <div class="extra-section">
-                    <div class="extra-title">📚 스킬북2</div>
-                    <div class="extra-content">${sb2.reservation || '구인중'}</div>
-                </div>
-                <div class="extra-section">
-                    <div class="extra-title">👼 엔레먹자</div>
-                    <div class="extra-content">${enre.length ? enre.join(', ') : '구인중'}</div>
+                <div class="extra-grid">
+                    ${renderExtraCard('📚 스킬북1', sb1.reservation)}
+                    ${renderExtraCard('📚 스킬북2', sb2.reservation, 'skill2')}
+                    ${renderExtraCard('👼 엔레먹자', enre.length ? enre.join(', ') : '', 'enre')}
                 </div>`;
 
-            statusBox.innerHTML = turn1Html + turn2Html + extraHtml;
+            statusBox.innerHTML = turnRowHtml + extraHtml;
 
             $('p1').value = j?.prices?.firstSecond ?? '';
             $('p2').value = j?.prices?.third ?? '';
             $('p3').value = j?.prices?.skillbook1 ?? '';
             $('p4').value = j?.prices?.skillbook2 ?? '';
 
             statusBox.querySelectorAll('[data-gear]').forEach(btn => {
                 btn.onclick = () => openTimeModal(btn.getAttribute('data-gear'), j);
             });
 
             const members = Array.isArray(j?.guildMembers) ? j.guildMembers : [];
             if (!members.length) {
                 mBox.innerHTML = '<div class="status-msg">등록된 공대원이 없습니다</div>';
             } else {
                 mBox.innerHTML = members.map(m => `
                     <div class="member-item">
                         <div class="member-info">
                             <span class="member-name">${m.nickname}</span>
                             <span class="member-job">${m.job}</span>
                         </div>
                     </div>`).join('');
             }
         }
 
         async function loadStatus() {
 
EOF
)